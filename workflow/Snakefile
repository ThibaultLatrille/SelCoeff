import os
import sys
import pandas as pd

sys.path.append('.')
from scripts.libraries import CategorySNP

configfile: 'config/config.yaml'

FOLDER = os.path.abspath('.')
EXP_FOLDER = f"{FOLDER}/experiments/{config['experiment']}"
os.makedirs(EXP_FOLDER,exist_ok=True)
sample_list = f"{FOLDER}/config/{config['SAMPLE_LIST']}"
model = config["MODEL"]
bins = config["bins"]
pop2sp = {}
SFS_LIST = []

for row_id, row in pd.read_csv(sample_list,sep='\t').iterrows():
    pop2sp[row['SampleName']] = row['Species']
    for method in config['METHOD_LIST']:
        SFS_LIST.append(EXP_FOLDER + f"/analysis/{row['Species']}.{row['SampleName']}.{method}")

ruleorder: parse_results_DFE > sfs

rule all:
    input:
        f'{EXP_FOLDER}/results/scatter.tsv',
        # f'{EXP_FOLDER}/supp-mat.pdf',

rule fixed_snp_by_pop:
    input:
        script=f'{FOLDER}/scripts/fixed_snp_by_pop.py',
        vcf=FOLDER + '/data_poly/{species}.{popu}.vcf.gz',
        fasta_folder=f'{FOLDER}/data_div/omm_NT_fasta.v10c_116'
    output:
        fasta=FOLDER + '/data_processed/{species}.{popu}.fasta'
    shell:
        'python3 {input.script} --species {wildcards.species} --vcf {input.vcf}  --fasta_folder {input.fasta_folder} --output {output.fasta}'

rule SIFT_annotate:
    input:
        script=f'{FOLDER}/scripts/annotate_SIFT.py',
        fasta_folder=f'{FOLDER}/data_div/omm_NT_fasta.v10c_116',
        fasta_pop=rules.fixed_snp_by_pop.output.fasta,
        sift_exec=f"{FOLDER}/utils/sift6.2.1/bin/info_on_seqs",
        blimps_dir=f"{FOLDER}/utils/sift6.2.1/blimps"
    output:
        directory(FOLDER + '/data_processed/sift.{species}.{popu}')
    shell:
        'rm -rf {output}/* && mkdir -p {output} && python3 {input.script} --species {wildcards.species} --sift_exec {input.sift_exec} --blimps_dir {input.blimps_dir} --fasta_folder {input.fasta_folder} --fasta_pop {input.fasta_pop} --output {output}'

rule merge_SIFT:
    input:
        script=f'{FOLDER}/scripts/merge_SIFT.py',
        sift_folder=rules.SIFT_annotate.output,
        vcf=FOLDER + '/data_poly/{species}.{popu}.vcf.gz',
    output:
        FOLDER + '/data_processed/snps_sift.{species}.{popu}.tsv'
    shell:
        'python3 {input.script} --species {wildcards.species} --vcf {input.vcf} --sift_folder {input.sift_folder} --output {output}'


rule opportunities:
    input:
        script=f'{FOLDER}/scripts/genome_opportunities.py',
        exp_folder=lambda wildcards: f'{FOLDER}/data_div/Experiments' if wildcards.method != 'SIFT' else rules.SIFT_annotate.output,
        fasta_pop=rules.fixed_snp_by_pop.output.fasta,
    output:
        tsv=f"{FOLDER}/data_processed/DFE.bins{bins}." + '{species}.{popu}.{method}.tsv',
        pdf=f"{FOLDER}/data_processed/DFE.bins{bins}." + '{species}.{popu}.{method}.pdf'
    shell:
        'python3 {input.script} --method {wildcards.method} --exp_folder {input.exp_folder} --fasta_pop {input.fasta_pop} --output_tsv {output.tsv} --output_pdf {output.pdf}'

rule gather_opportunities:
    input:
        tsv=[f"{FOLDER}/data_processed/DFE.bins{bins}.{species}.{popu}.MutSel.tsv" for popu, species in pop2sp.items()],
        sample_list=sample_list,
        script=f'{FOLDER}/scripts/gather_opportunities.py'
    output:
        tsv=f'{EXP_FOLDER}/results/scatter.tsv'
    shell:
        'python3 {input.script} --tsv {input.tsv} --sample_list {input.sample_list} --bins {bins} --output {output.tsv}'


rule sfs:
    input:
        vcf=FOLDER + '/data_poly/{species}.{popu}.vcf.gz',
        script=f'{FOLDER}/scripts/plot_sfs.py',
        genome_results=f'{FOLDER}/data_div/genome_results.tsv',
        opportunities=rules.opportunities.output.tsv,
        sift_file=lambda wildcards: rules.merge_SIFT.output if wildcards.method == 'SIFT' else []
    output:
        pdf=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.pdf',
        tsv=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.tsv'
    params:
        opt_sift_file=lambda wildcards, input, output: f'--sift_file {input.sift_file}' if wildcards.method == 'SIFT' else "",
        config=f'--nbr_replicates {config["nbr_replicates"]} --subsample {config["subsample"]}'
    shell:
        'python3 {input.script} {params.opt_sift_file} {params.config} --vcf {input.vcf} --pop {wildcards.popu} --species {wildcards.species} --method {wildcards.method} --bins {bins} --genome_results {input.genome_results} --opportunities {input.opportunities} --output {output.pdf}'

rule polyDFE:
    input:
        sfs=rules.sfs.output.pdf,
        polyDFE=f'{FOLDER}/utils/polyDFE/polyDFE-2.0-linux-64-bit',
        init_file=FOLDER + '/config/{model}_init.txt',
        range_file=FOLDER + '/config/{model}_range.txt'
    output:
        out=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.{cat}.{model}.out',
        stderr=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.{cat}.{model}.stderr'
    params:
        sfs=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.{cat}.sfs',
        model=lambda wildcards: "-m D 5" if wildcards.model == "polyDFE_D" else "-m C"
    shell:
        '{input.polyDFE} -d {params.sfs} -i {input.init_file} 1 -r {input.range_file} 1 -w {params.model} 1> {output.out} 2> {output.stderr}'

rule grapes:
    input:
        sfs=rules.sfs.output.pdf,
        grapes=f'{FOLDER}/utils/grapes/grapes/grapes',
    output:
        out=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.{cat}.grapes.out',
        stdout=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.{cat}.grapes.stdout',
        stderr=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.{cat}.grapes.stderr'
    params:
        dofe=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.{cat}.dofe',
    shell:
        "{input.grapes} -in {params.dofe} -out {output.out} -model GammaExpo -no_div_data 1> {output.stdout} 2> {output.stderr}"

rule parse_results_DFE:
    input:
        modelfile=lambda wildcards: expand(EXP_FOLDER + '/analysis/{{species}}.{{popu}}.{{method}}.{cat}.{{model}}.out',cat=CategorySNP(wildcards.method,bins).all()),
        script=f'{FOLDER}/scripts/parse_results_DFE.py'
    output:
        pdf=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.{model}.pdf',
        tsv=EXP_FOLDER + '/analysis/{species}.{popu}.{method}.{model}.tsv'
    shell:
        'python3 {input.script} --input {input.modelfile} --method {wildcards.method} --bins {bins} --output {output.pdf}'

rule plot_theta_heatmap:
    input:
        tsv=map(lambda p: f"{p}.tsv",SFS_LIST),
        sample_list=sample_list,
        script=f'{FOLDER}/scripts/plot_heatmap.py'
    output:
        tsv=f'{EXP_FOLDER}/results/Theta.results.tsv'
    shell:
        'python3 {input.script} --tsv {input.tsv} --sample_list {input.sample_list} --bins {bins} --output {output.tsv}'

rule plot_dfe_heatmap:
    input:
        tsv=map(lambda p: f"{p}.{model}.tsv",SFS_LIST),
        sample_list=sample_list,
        script=f'{FOLDER}/scripts/plot_heatmap.py'
    output:
        tsv=f'{EXP_FOLDER}/results/DFE.results.tsv'
    shell:
        'python3 {input.script} --tsv {input.tsv} --sample_list {input.sample_list} --bins {bins} --output {output.tsv}'


rule latex:
    input:
        sfs=map(lambda p: f"{p}.pdf",SFS_LIST),
        tex_source=f'{FOLDER}/manuscript/supp-mat.tex',
        tsv_theta=f'{EXP_FOLDER}/results/Theta.results.tsv',
        tsv_dfe=f'{EXP_FOLDER}/results/DFE.results.tsv',
        script=f'{FOLDER}/scripts/tex_sfs.py'
    output:
        tex_include=f'{EXP_FOLDER}/include-figures.tex',
        tex_target=f'{EXP_FOLDER}/supp-mat.tex',
        pdf=f'{EXP_FOLDER}/supp-mat.pdf'
    shell: 'python3 {input.script} --sfs {input.sfs} --results {input.tsv_theta} --tex_source {input.tex_source} --tex_target {output.tex_target} --tex_include {output.tex_include}'
